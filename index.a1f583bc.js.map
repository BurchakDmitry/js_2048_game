{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.initialState = initialState || this.generateNewBoard();\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.firstState = JSON.parse(JSON.stringify(this.board));\n        this.score = 0;\n        this.status = \"idle\";\n        this.checkLeft = true;\n        this.checkRight = true;\n        this.checkUp = true;\n        this.checkDown = true;\n        this.checkStart = false;\n    }\n    // #region get states\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    // #endregion\n    // #region navigation\n    moveLeft() {\n        if (this.checkStart) {\n            const currentState = [\n                ...this.getState()\n            ];\n            this.board = this.board.map((row)=>{\n                let newRow = row.filter((el)=>el !== 0);\n                for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow[i + 1] = 0;\n                }\n                newRow = newRow.filter((el)=>el !== 0);\n                while(newRow.length < 4)newRow.push(0);\n                return newRow;\n            });\n            if (this.checkWin()) this.status = \"win\";\n            this.checkLeft = this.differenceArrays(currentState, this.getState());\n            if (this.checkLeft) this.addRandomTile(this.board);\n            if (this.checkLose() && !this.checkWin()) this.status = \"lose\";\n        }\n    }\n    moveRight() {\n        if (this.checkStart) {\n            const currentState = [\n                ...this.getState()\n            ];\n            this.board = this.board.map((row)=>{\n                let newRow = row.filter((el)=>el !== 0).reverse();\n                for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow[i + 1] = 0;\n                }\n                newRow = newRow.filter((el)=>el !== 0);\n                while(newRow.length < 4)newRow.push(0);\n                return newRow.reverse();\n            });\n            if (this.checkWin()) this.status = \"win\";\n            this.checkRight = this.differenceArrays(currentState, this.getState());\n            if (this.checkRight) this.addRandomTile(this.board);\n            if (this.checkLose() && !this.checkWin()) this.status = \"lose\";\n        }\n    }\n    moveUp() {\n        if (this.checkStart) {\n            const currentState = [\n                ...this.getState()\n            ];\n            this.board = this.transpose(this.board);\n            this.moveLeft();\n            this.board = this.transpose(this.board);\n            if (this.checkWin()) this.status = \"win\";\n            this.checkUp = this.differenceArrays(currentState, this.getState());\n            if (this.checkLose() && !this.checkWin()) this.status = \"lose\";\n        }\n    }\n    moveDown() {\n        if (this.checkStart) {\n            const currentState = [\n                ...this.getState()\n            ];\n            this.board = this.transpose(this.board);\n            this.moveRight();\n            this.board = this.transpose(this.board);\n            if (this.checkWin()) this.status = \"win\";\n            this.checkDown = this.differenceArrays(currentState, this.getState());\n            if (this.checkLose() && !this.checkWin()) this.status = \"lose\";\n        }\n    }\n    // #endregion\n    // #region checking and changing state\n    differenceArrays(arr1, arr2) {\n        const firstArr = arr1.flat().join(\"\");\n        const secondArr = arr2.flat().join(\"\");\n        return firstArr !== secondArr;\n    }\n    start() {\n        this.board = this.generateNewBoard();\n        this.board = JSON.parse(JSON.stringify([\n            ...this.firstState\n        ]));\n        this.score = 0;\n        this.status = this.getStatus() !== \"win\" && \"playing\";\n        this.checkStart = true;\n        for(let i = 0; i < 2; i++)this.addRandomTile(this.board);\n    }\n    restart() {\n        this.board = JSON.parse(JSON.stringify([\n            ...this.firstState\n        ]));\n        this.score = 0;\n        this.status = \"idle\";\n        this.checkStart = false;\n    }\n    // #endregion\n    // #region array manipulation\n    generateNewBoard() {\n        const newBoard = [\n            [],\n            [],\n            [],\n            []\n        ];\n        newBoard.forEach((row)=>{\n            for(let i = 0; i < 4; i++)row.push(0);\n        });\n        return newBoard;\n    }\n    addRandomTile(currentBoard) {\n        const emptyCells = [];\n        for(let i = 0; i < currentBoard.length; i++){\n            for(let j = 0; j < currentBoard[i].length; j++)if (currentBoard[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const [row, col] = emptyCells[randomIndex];\n            const randomValue = Math.random() < 0.9 ? 2 : 4;\n            currentBoard[row][col] = randomValue;\n        }\n        return currentBoard;\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    // #endregion\n    // #region check moves\n    checkWin() {\n        const result = [\n            ...this.board\n        ].flat().filter((el)=>el >= 2048).length;\n        return result > 0;\n    }\n    checkLose() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return false;\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$table = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$tableCell = [\n    ...$09e991522ca7e64e$var$table.querySelectorAll(\"td\")\n];\nconst $09e991522ca7e64e$var$scoreInfo = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$playButton = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$playButton.addEventListener(\"click\", (e)=>{\n    if (e.target.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        e.target.textContent = \"Restart\";\n        e.target.classList.remove(\"start\");\n        e.target.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$tableFormatting();\n        document.addEventListener(\"keydown\", (btn)=>{\n            switch(btn.key){\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n                default:\n                    break;\n            }\n            $09e991522ca7e64e$var$tableFormatting();\n        });\n        let startX = 0;\n        let startY = 0;\n        const threshold = 100;\n        document.addEventListener(\"touchstart\", function(ev) {\n            startX = ev.touches[0].clientX;\n            startY = ev.touches[0].clientY;\n        }, false);\n        document.addEventListener(\"touchend\", (ev)=>{\n            const endX = ev.changedTouches[0].clientX;\n            const endY = ev.changedTouches[0].clientY;\n            const diffX = endX - startX;\n            const diffY = endY - startY;\n            if (Math.abs(diffX) > Math.abs(diffY)) {\n                if (diffX > threshold) $09e991522ca7e64e$var$game.moveRight();\n                else if (diffX < -threshold) $09e991522ca7e64e$var$game.moveLeft();\n            } else {\n                if (diffY > threshold) $09e991522ca7e64e$var$game.moveDown();\n                else if (diffY < -threshold) $09e991522ca7e64e$var$game.moveUp();\n            }\n            $09e991522ca7e64e$var$tableFormatting();\n        }, false);\n        return;\n    }\n    if (e.target.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        e.target.classList.remove(\"restart\");\n        e.target.classList.add(\"start\");\n        e.target.textContent = \"Start\";\n        $09e991522ca7e64e$var$tableFormatting();\n    }\n});\nfunction $09e991522ca7e64e$var$tableFormatting() {\n    $09e991522ca7e64e$var$tableCell.forEach((cell, index)=>{\n        const flatBoard = $09e991522ca7e64e$var$game.board.flat();\n        const cellContent = cell.textContent;\n        cell.classList.remove(`field-cell--${cellContent}`);\n        cell.textContent = flatBoard[index] !== 0 ? flatBoard[index] : \"\";\n        cell.classList.add(`field-cell--${flatBoard[index]}`);\n        $09e991522ca7e64e$var$scoreInfo.textContent = $09e991522ca7e64e$var$game.getScore();\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        else $09e991522ca7e64e$var$loseMessage.classList.toggle(\"hidden\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n        else $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    });\n}\n\n\n//# sourceMappingURL=index.a1f583bc.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst table = document.querySelector('.game-field');\nconst tableCell = [...table.querySelectorAll('td')];\nconst scoreInfo = document.querySelector('.game-score');\nconst playButton = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nplayButton.addEventListener('click', (e) => {\n  if (e.target.textContent === 'Start') {\n    game.start();\n    e.target.textContent = 'Restart';\n    e.target.classList.remove('start');\n    e.target.classList.add('restart');\n\n    startMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n\n    tableFormatting();\n\n    document.addEventListener('keydown', (btn) => {\n      switch (btn.key) {\n        case 'ArrowUp':\n          game.moveUp();\n\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n\n          break;\n        case 'ArrowLeft':\n          game.moveLeft();\n\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n\n          break;\n        default:\n          break;\n      }\n\n      tableFormatting();\n    });\n\n    let startX = 0;\n    let startY = 0;\n    const threshold = 100;\n\n    document.addEventListener(\n      'touchstart',\n      function (ev) {\n        startX = ev.touches[0].clientX;\n        startY = ev.touches[0].clientY;\n      },\n      false,\n    );\n\n    document.addEventListener(\n      'touchend',\n      (ev) => {\n        const endX = ev.changedTouches[0].clientX;\n        const endY = ev.changedTouches[0].clientY;\n\n        const diffX = endX - startX;\n        const diffY = endY - startY;\n\n        if (Math.abs(diffX) > Math.abs(diffY)) {\n          if (diffX > threshold) {\n            game.moveRight();\n          } else if (diffX < -threshold) {\n            game.moveLeft();\n          }\n        } else {\n          if (diffY > threshold) {\n            game.moveDown();\n          } else if (diffY < -threshold) {\n            game.moveUp();\n          }\n        }\n\n        tableFormatting();\n      },\n      false,\n    );\n\n    return;\n  }\n\n  if (e.target.textContent === 'Restart') {\n    game.restart();\n\n    e.target.classList.remove('restart');\n    e.target.classList.add('start');\n    e.target.textContent = 'Start';\n\n    tableFormatting();\n  }\n});\n\nfunction tableFormatting() {\n  tableCell.forEach((cell, index) => {\n    const flatBoard = game.board.flat();\n    const cellContent = cell.textContent;\n\n    cell.classList.remove(`field-cell--${cellContent}`);\n    cell.textContent = flatBoard[index] !== 0 ? flatBoard[index] : '';\n    cell.classList.add(`field-cell--${flatBoard[index]}`);\n    scoreInfo.textContent = game.getScore();\n\n    if (game.getStatus() === 'win') {\n      winMessage.classList.remove('hidden');\n    } else {\n      loseMessage.classList.toggle('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      loseMessage.classList.remove('hidden');\n    } else {\n      loseMessage.classList.add('hidden');\n    }\n  });\n}\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.initialState = initialState || this.generateNewBoard();\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.firstState = JSON.parse(JSON.stringify(this.board));\n    this.score = 0;\n    this.status = 'idle';\n    this.checkLeft = true;\n    this.checkRight = true;\n    this.checkUp = true;\n    this.checkDown = true;\n    this.checkStart = false;\n  }\n\n  // #region get states\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  // #endregion\n\n  // #region navigation\n\n  moveLeft() {\n    if (this.checkStart) {\n      const currentState = [...this.getState()];\n\n      this.board = this.board.map((row) => {\n        let newRow = row.filter((el) => el !== 0);\n\n        for (let i = 0; i < newRow.length; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n          }\n        }\n\n        newRow = newRow.filter((el) => el !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        return newRow;\n      });\n\n      if (this.checkWin()) {\n        this.status = 'win';\n      }\n\n      this.checkLeft = this.differenceArrays(currentState, this.getState());\n\n      if (this.checkLeft) {\n        this.addRandomTile(this.board);\n      }\n\n      if (this.checkLose() && !this.checkWin()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.checkStart) {\n      const currentState = [...this.getState()];\n\n      this.board = this.board.map((row) => {\n        let newRow = row.filter((el) => el !== 0).reverse();\n\n        for (let i = 0; i < newRow.length; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n          }\n        }\n\n        newRow = newRow.filter((el) => el !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        return newRow.reverse();\n      });\n\n      if (this.checkWin()) {\n        this.status = 'win';\n      }\n\n      this.checkRight = this.differenceArrays(currentState, this.getState());\n\n      if (this.checkRight) {\n        this.addRandomTile(this.board);\n      }\n\n      if (this.checkLose() && !this.checkWin()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.checkStart) {\n      const currentState = [...this.getState()];\n\n      this.board = this.transpose(this.board);\n      this.moveLeft();\n      this.board = this.transpose(this.board);\n\n      if (this.checkWin()) {\n        this.status = 'win';\n      }\n\n      this.checkUp = this.differenceArrays(currentState, this.getState());\n\n      if (this.checkLose() && !this.checkWin()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.checkStart) {\n      const currentState = [...this.getState()];\n\n      this.board = this.transpose(this.board);\n      this.moveRight();\n      this.board = this.transpose(this.board);\n\n      if (this.checkWin()) {\n        this.status = 'win';\n      }\n      this.checkDown = this.differenceArrays(currentState, this.getState());\n\n      if (this.checkLose() && !this.checkWin()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  // #endregion\n\n  // #region checking and changing state\n\n  differenceArrays(arr1, arr2) {\n    const firstArr = arr1.flat().join('');\n    const secondArr = arr2.flat().join('');\n\n    return firstArr !== secondArr;\n  }\n\n  start() {\n    this.board = this.generateNewBoard();\n    this.board = JSON.parse(JSON.stringify([...this.firstState]));\n    this.score = 0;\n    this.status = this.getStatus() !== 'win' && 'playing';\n    this.checkStart = true;\n\n    for (let i = 0; i < 2; i++) {\n      this.addRandomTile(this.board);\n    }\n  }\n\n  restart() {\n    this.board = JSON.parse(JSON.stringify([...this.firstState]));\n    this.score = 0;\n    this.status = 'idle';\n    this.checkStart = false;\n  }\n\n  // #endregion\n\n  // #region array manipulation\n  generateNewBoard() {\n    const newBoard = [[], [], [], []];\n\n    newBoard.forEach((row) => {\n      for (let i = 0; i < 4; i++) {\n        row.push(0);\n      }\n    });\n\n    return newBoard;\n  }\n\n  addRandomTile(currentBoard) {\n    const emptyCells = [];\n\n    for (let i = 0; i < currentBoard.length; i++) {\n      for (let j = 0; j < currentBoard[i].length; j++) {\n        if (currentBoard[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const [row, col] = emptyCells[randomIndex];\n      const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n      currentBoard[row][col] = randomValue;\n    }\n\n    return currentBoard;\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  // #endregion\n\n  // #region check moves\n  checkWin() {\n    const result = [...this.board].flat().filter((el) => el >= 2048).length;\n\n    return result > 0;\n  }\n\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  // #endregion\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","generateNewBoard","board","JSON","parse","stringify","firstState","score","status","checkLeft","checkRight","checkUp","checkDown","checkStart","getState","getScore","getStatus","moveLeft","currentState","map","row","newRow","filter","el","i","length","push","checkWin","differenceArrays","addRandomTile","checkLose","moveRight","reverse","moveUp","transpose","moveDown","arr1","arr2","firstArr","flat","join","start","restart","newBoard","forEach","currentBoard","emptyCells","j","randomIndex","Math","floor","random","col","matrix","_","colIndex","result","$09e991522ca7e64e$var$tableCell","$09e991522ca7e64e$var$table","document","querySelector","querySelectorAll","$09e991522ca7e64e$var$scoreInfo","$09e991522ca7e64e$var$playButton","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$tableFormatting","cell","index","flatBoard","cellContent","textContent","classList","remove","add","toggle","addEventListener","e","target","btn","key","startX","startY","ev","touches","clientX","clientY","endX","changedTouches","endY","diffX","diffY","abs"],"version":3,"file":"index.a1f583bc.js.map"}